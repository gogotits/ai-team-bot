# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import os
from dotenv import load_dotenv
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –ò–ò-–ª–æ–≥–∏–∫—É
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain_community.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_chroma import Chroma
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate

# --- 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
if "GOOGLE_API_KEY" not in os.environ or "TELEGRAM_BOT_TOKEN" not in os.environ:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ API –≤ .env —Ñ–∞–π–ª–µ!")
print("‚úÖ –ö–ª—é—á–∏ API –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# --- 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0.7)
router_llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0)
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
print("‚úÖ LLM –∏ –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# --- 5. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ê–≥–µ–Ω—Ç–æ–≤ ---
def create_archivist_agent():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ê–≥–µ–Ω—Ç–∞ ¬´–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å¬ª...")
    vector_store_archivist = Chroma(persist_directory="./chroma_db_archivist", embedding_function=embeddings)
    if not vector_store_archivist._collection.count():
        print("–ë–∞–∑–∞ ¬´–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å–∞¬ª –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
        loader = PyPDFLoader("docs/document.pdf")
        documents = loader.load()
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
        texts = text_splitter.split_documents(documents)
        vector_store_archivist.add_documents(texts)
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É ¬´–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å–∞¬ª.")
    else:
        print("‚úÖ –ë–∞–∑–∞ ¬´–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å–∞¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    return RetrievalQA.from_chain_type(llm, retriever=vector_store_archivist.as_retriever())

def create_analyst_agent():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ê–≥–µ–Ω—Ç–∞ ¬´–ê–Ω–∞–ª–∏—Ç–∏–∫¬ª...")
    vector_store_analyst = Chroma(persist_directory="./chroma_db_analyst", embedding_function=embeddings)
    if not vector_store_analyst._collection.count():
        print("–ë–∞–∑–∞ ¬´–ê–Ω–∞–ª–∏—Ç–∏–∫–∞¬ª –ø—É—Å—Ç–∞. –°–æ–∑–¥–∞–µ–º –∑–Ω–∞–Ω–∏—è...")
        analyst_texts = [
            "–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞, –∫–æ–≥–¥–∞ —Ü–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ —Ä–∞—Å—Ç—É—Ç –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏—Ö —Ä–æ—Å—Ç.",
            "–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ –ø–∞–¥–∞—é—Ç, –∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞.",
            "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - —ç—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –ø—É—Ç–µ–º –≤–ª–æ–∂–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–∫—Ç–∏–≤—ã."
        ]
        vector_store_analyst.add_texts(texts=analyst_texts)
        print("‚úÖ –ë–∞–∑–∞ ¬´–ê–Ω–∞–ª–∏—Ç–∏–∫–∞¬ª —Å–æ–∑–¥–∞–Ω–∞.")
    else:
        print("‚úÖ –ë–∞–∑–∞ ¬´–ê–Ω–∞–ª–∏—Ç–∏–∫–∞¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    return RetrievalQA.from_chain_type(llm, retriever=vector_store_analyst.as_retriever())

# --- 6. –õ–æ–≥–∏–∫–∞ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
router_template = """–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–¥–Ω–æ–º—É –∏–∑ –¥–≤—É—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å' –∏–ª–∏ '–ê–Ω–∞–ª–∏—Ç–∏–∫'. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:
- –ê–Ω–∞–ª–∏—Ç–∏–∫: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ–±—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö. –í—ã–±–∏—Ä–∞–π –µ–≥–æ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ç–∞–∫–∏—Ö —Ç–µ–º, –∫–∞–∫ '–∞–∫—Ü–∏–∏', '—Ä—ã–Ω–æ–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', '–±—ã—á–∏–π —Ä—ã–Ω–æ–∫', '–º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫'.
- –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í—ã–±–∏—Ä–∞–π –µ–≥–æ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —è–≤–Ω–æ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç ("—á—Ç–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ...", "—Ä–∞—Å—Å–∫–∞–∂–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ...") –∏–ª–∏ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º.
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_question}'
–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:"""
prompt = PromptTemplate(template=router_template, input_variables=["user_question"])
router_chain = prompt | router_llm

# --- 7. –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
print("--- –°–æ–∑–¥–∞–Ω–∏–µ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ ---")
archivist_agent = create_archivist_agent()
analyst_agent = create_analyst_agent()
print("--- –í—Å–µ –∞–≥–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã ---")

# --- 8. –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_query = update.message.text
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç chat_id {chat_id}: '{user_query}'")

    await update.message.reply_text('–î—É–º–∞—é...')

    try:
        # 1. –í—ã–∑—ã–≤–∞–µ–º –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        chosen_agent_name = router_chain.invoke({"user_question": user_query}).content.strip()
        logger.info(f"–î–∏—Å–ø–µ—Ç—á–µ—Ä –≤—ã–±—Ä–∞–ª: '{chosen_agent_name}'")

        # 2. –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        if "–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å" in chosen_agent_name:
            result = archivist_agent.invoke({"query": user_query})
        elif "–ê–Ω–∞–ª–∏—Ç–∏–∫" in chosen_agent_name:
            result = analyst_agent.invoke({"query": user_query})
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞, –æ–±—Ä–∞—â–∞—é—Å—å –∫ –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            result = archivist_agent.invoke({"query": user_query})
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response_text = result["result"]
        await update.message.reply_text(response_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è chat_id {chat_id}.")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.\n–û—à–∏–±–∫–∞: {e}")

# --- 9. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(os.environ["TELEGRAM_BOT_TOKEN"]).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é)
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()