# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ê–≥–µ–Ω—Ç–∞
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from langchain.agents import AgentExecutor, create_react_agent, Tool

# –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ –Ω–æ–≤–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from langchain_tavily import TavilySearch
from langchain.chains import RetrievalQA
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_chroma import Chroma

# --- 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
load_dotenv()
if "GOOGLE_API_KEY" not in os.environ or "TELEGRAM_BOT_TOKEN" not in os.environ or "TAVILY_API_KEY" not in os.environ:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ API –≤ .env —Ñ–∞–π–ª–µ!")
print("‚úÖ –ö–ª—é—á–∏ API –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# --- 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0.7)
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
print("‚úÖ LLM –∏ –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# --- 4. –°–æ–∑–¥–∞–Ω–∏–µ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
# –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞
search_tool = TavilySearch(max_results=3)
search_tool.description = "–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, —Ñ–∞–∫—Ç–∞—Ö, –ø–æ–≥–æ–¥–µ –∏–ª–∏ –ª—é–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞. –≠—Ç–æ —Ç–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 2: –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF)
archivist_db = Chroma(persist_directory="./chroma_db_archivist", embedding_function=embeddings)
archivist_chain = RetrievalQA.from_chain_type(llm, retriever=archivist_db.as_retriever())
archivist_tool = Tool(
    name="Archivist",
    func=archivist_chain.invoke,
    description="–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –∫–∞—Å–∞—é—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ...?'"
)

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 3: –ê–Ω–∞–ª–∏—Ç–∏–∫ (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏)
analyst_db = Chroma(persist_directory="./chroma_db_analyst", embedding_function=embeddings)
analyst_chain = RetrievalQA.from_chain_type(llm, retriever=analyst_db.as_retriever())
analyst_tool = Tool(
    name="Analyst",
    func=analyst_chain.invoke,
    description="–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –æ–±—â–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: '—á—Ç–æ —Ç–∞–∫–æ–µ –±—ã—á–∏–π —Ä—ã–Ω–æ–∫?'"
)
tools = [search_tool, archivist_tool, analyst_tool]
print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã: {[tool.name for tool in tools]}")

# --- 5. –°–æ–∑–¥–∞–Ω–∏–µ –ì–ª–∞–≤–Ω–æ–≥–æ –ê–≥–µ–Ω—Ç–∞ ---
agent_prompt_template = """–¢—ã ‚Äî —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–±—Ä–∞–≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{tools}
–ò–°–ü–û–õ–¨–ó–£–ô –°–õ–ï–î–£–Æ–©–ò–ô –§–û–†–ú–ê–¢ –î–õ–Ø –û–¢–í–ï–¢–ê:
Question: –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å
Thought: –ú–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è. –ö–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –ø–æ—á–µ–º—É?
Action: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ [{tool_names}]
Action Input: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Å–∞–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
Observation: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (—ç—Ç–æ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).
Thought: –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
Final Answer: –§–∏–Ω–∞–ª—å–Ω—ã–π, –ø–æ–ª–Ω—ã–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ù–∞—á–∏–Ω–∞–µ–º!
Question: {input}
Thought:{agent_scratchpad}"""
agent_prompt = PromptTemplate.from_template(agent_prompt_template)
agent = create_react_agent(llm, tools, agent_prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
print("‚úÖ –ì–ª–∞–≤–Ω—ã–π –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.")


# --- 6. –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_query = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: '{user_query}'")
    await update.message.reply_text('–î—É–º–∞—é...')

    try:
        result = agent_executor.invoke({"input": user_query})
        response_text = result["output"]
        await update.message.reply_text(response_text)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")

# --- 7. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(os.environ["TELEGRAM_BOT_TOKEN"]).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é)
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()