# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ê–≥–µ–Ω—Ç–∞
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage
from langchain.prompts import PromptTemplate
from langchain.agents import AgentExecutor, create_react_agent, Tool

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
from langchain_tavily import TavilySearch
from langchain.chains import RetrievalQA
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_chroma import Chroma

# --- 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
load_dotenv()
if "GOOGLE_API_KEY" not in os.environ or "TELEGRAM_BOT_TOKEN" not in os.environ or "TAVILY_API_KEY" not in os.environ:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ API –≤ .env —Ñ–∞–π–ª–µ!")
print("‚úÖ –ö–ª—é—á–∏ API –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# --- 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0.7)
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
print("‚úÖ LLM –∏ –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# --- 4. –°–æ–∑–¥–∞–Ω–∏–µ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
search_tool = TavilySearch(max_results=3)
search_tool.description = "–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, —Ñ–∞–∫—Ç–∞—Ö, –ø–æ–≥–æ–¥–µ –∏–ª–∏ –ª—é–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞. –≠—Ç–æ —Ç–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
archivist_db = Chroma(persist_directory="./chroma_db_archivist", embedding_function=embeddings)
archivist_chain = RetrievalQA.from_chain_type(llm, retriever=archivist_db.as_retriever())
archivist_tool = Tool(
    name="Archivist",
    func=archivist_chain.invoke,
    description="–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –∫–∞—Å–∞—é—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ...?'"
)
analyst_db = Chroma(persist_directory="./chroma_db_analyst", embedding_function=embeddings)
analyst_chain = RetrievalQA.from_chain_type(llm, retriever=analyst_db.as_retriever())
analyst_tool = Tool(
    name="Analyst",
    func=analyst_chain.invoke,
    description="–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –æ–±—â–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: '—á—Ç–æ —Ç–∞–∫–æ–µ –±—ã—á–∏–π —Ä—ã–Ω–æ–∫?'"
)
tools = [search_tool, archivist_tool, analyst_tool]
print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã: {[tool.name for tool in tools]}")

# --- 5. –°–æ–∑–¥–∞–Ω–∏–µ –ì–ª–∞–≤–Ω–æ–≥–æ –ê–≥–µ–Ω—Ç–∞ ---
agent_prompt_template = """–¢—ã ‚Äî —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç... (–≤–µ—Å—å –≤–∞—à –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
# ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è agent_executor –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å)
agent_prompt = PromptTemplate.from_template(agent_prompt_template)
agent = create_react_agent(llm, tools, agent_prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
print("‚úÖ –ì–ª–∞–≤–Ω—ã–π –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.")


# --- 6. –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.')

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_query = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: '{user_query}'")
    await update.message.reply_text('–î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º...')

    try:
        result = agent_executor.invoke({"input": user_query})
        response_text = result["output"]
        await update.message.reply_text(response_text)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    await update.message.reply_text('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        user_caption = update.message.caption
        if not user_caption:
            user_caption = "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        message_payload = HumanMessage(
            content=[
                {"type": "text", "text": user_caption},
                {"type": "image_url", "image_url": f"data:image/jpeg;base64,{photo_bytes}"},
            ]
        )
        
        # –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response = llm.invoke([message_payload])
        
        await update.message.reply_text(response.content)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")


# --- 7. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    application = Application.builder().token(os.environ["TELEGRAM_BOT_TOKEN"]).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    # –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))

    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∑—Ä–µ–Ω–∏—è...")
    application.run_polling()

if __name__ == '__main__':
    main()