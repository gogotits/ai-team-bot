# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import os
import logging
import base64
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import tempfile
from langchain.agents.format_scratchpad.tools import render_text_description

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
from docx import Document as WordDocument
from openpyxl import Workbook as ExcelWorkbook
from fpdf import FPDF

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã LangChain
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage
from langchain.agents import AgentExecutor, create_tool_calling_agent, Tool
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.memory import ConversationBufferWindowMemory
from langchain_tavily import TavilySearch
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_chroma import Chroma
from langchain.text_splitter import RecursiveCharacterTextSplitter

# --- 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
load_dotenv()
if "GOOGLE_API_KEY" not in os.environ or "TELEGRAM_BOT_TOKEN" not in os.environ or "TAVILY_API_KEY" not in os.environ:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ API –≤ .env —Ñ–∞–π–ª–µ!")
print("‚úÖ –ö–ª—é—á–∏ API –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# --- 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0.7)
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
print("‚úÖ LLM –∏ –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# --- 4. –ï–î–ò–ù–ê–Ø –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –ò –§–£–ù–ö–¶–ò–ò-–ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ---
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
persistent_storage_path = "/var/data/main_chroma_db"
main_db = Chroma(persist_directory=persistent_storage_path, embedding_function=embeddings)
retriever = main_db.as_retriever(search_kwargs={'k': 5})
print(f"‚úÖ –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞. –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {main_db._collection.count()}")

# --- –§—É–Ω–∫—Ü–∏–∏-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ---
def create_word_document(content: str) -> str:
    doc = WordDocument()
    doc.add_paragraph(content)
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".docx", prefix="report_")
    doc.save(temp_file.name)
    return f"–î–æ–∫—É–º–µ–Ω—Ç Word —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {temp_file.name}"

def retrieve_from_memory(query: str) -> str:
    logger.info(f"–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    docs = retriever.invoke(query)
    if not docs:
        return "–í –º–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É."
    return "\n".join([doc.page_content for doc in docs])

# --- 5. –°–û–ó–î–ê–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–°–¢–û–í (–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –ê–≥–µ–Ω—Ç–æ–≤) ---

def create_specialist_agent(persona: str, specialist_tools: list) -> AgentExecutor:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è stateless-–∞–≥–µ–Ω—Ç–æ–≤-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."""
    prompt = ChatPromptTemplate.from_messages([
        ("system", persona),
        ("human", "{input}"),
        MessagesPlaceholder("agent_scratchpad"),
    ])
    agent = create_tool_calling_agent(llm, specialist_tools, prompt)
    return AgentExecutor(agent=agent, tools=specialist_tools, verbose=True)

# –°–æ–∑–¥–∞–µ–º –ê–≥–µ–Ω—Ç–∞-–ò—Å—Ç–æ—Ä–∏–∫–∞
historian_persona = "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—Ä–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."
historian_agent = create_specialist_agent(historian_persona, [TavilySearch(max_results=5)])

# --- 6. –°–û–ó–î–ê–ù–ò–ï –ì–õ–ê–í–ù–û–ì–û –ê–ì–ï–ù–¢–ê (–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è) ---
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ì–ª–∞–≤–Ω–æ–≥–æ –ê–≥–µ–Ω—Ç–∞...")
main_tools = [
    Tool(
        name="HistoryExpert",
        func=historian_agent.invoke,
        description="–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—Ä–∏–µ–π, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –ª–∏—á–Ω–æ—Å—Ç—è–º–∏, —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –¥–∞—Ç–∞–º–∏."
    ),
    Tool(
        name="MemoryRetriever",
        func=retrieve_from_memory,
        description="–ò—Å–ø–æ–ª—å–∑—É–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–µ–π –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–≤—ã–º, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ä–∞–Ω–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º."
    ),
    Tool(
        name="CreateWordDocument",
        func=create_word_document,
        description="–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ Word (.docx)."
    ),
]

main_system_prompt = """–¢—ã ‚Äî –ì–ª–∞–≤–Ω—ã–π –ê–≥–µ–Ω—Ç-–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–æ–º–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.

–¢–í–û–Ø –ö–û–ú–ê–ù–î–ê –≠–ö–°–ü–ï–†–¢–û–í (–ò–ù–°–¢–†–£–ú–ï–ù–¢–´):
{tools}

–¢–í–û–ô –ê–õ–ì–û–†–ò–¢–ú:
1.  –ü–æ–π–º–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.
2.  –í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç) –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
3.  –ß–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞—á—É –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–π –µ–º—É.
4.  –ü–æ–ª—É—á–∏–≤ –æ—Ç–≤–µ—Ç –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∏ –¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""

main_prompt = ChatPromptTemplate.from_messages([
    ("system", main_system_prompt),
    MessagesPlaceholder("chat_history"),
    ("human", "{input}"),
    MessagesPlaceholder("agent_scratchpad"),
])

# –°—Ç–∞–ª–æ:
# –í–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –≤ prompt.
main_prompt = main_prompt.partial(tools=render_text_description(main_tools))
main_agent = create_tool_calling_agent(llm, main_tools, main_prompt)
memory = ConversationBufferWindowMemory(k=8, memory_key="chat_history", return_messages=True)
main_agent_executor = AgentExecutor(
    agent=main_agent,
    tools=main_tools,
    memory=memory,
    verbose=True,
    handle_parsing_errors=True
)
print("‚úÖ –ì–ª–∞–≤–Ω—ã–π –ê–≥–µ–Ω—Ç (–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å) —Å–æ–∑–¥–∞–Ω.")

# --- 7. –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['chat_history'] = []
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º —Å–µ–≥–æ–¥–Ω—è?')

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_query = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: '{user_query}'")
    await update.message.reply_text('–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏... –û–±—Ä–∞—â–∞—é—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.')
    
    try:
        chat_history = context.user_data.get('chat_history', [])
        result = main_agent_executor.invoke({"input": user_query, "chat_history": chat_history})
        
        context.user_data['chat_history'] = result['chat_history']

        response_text = result["output"]
        if response_text.startswith("–î–æ–∫—É–º–µ–Ω—Ç") and '.docx' in response_text:
            try:
                file_path = response_text.split(":")[-1].strip()
                if os.path.exists(file_path):
                    await context.bot.send_document(chat_id=update.effective_chat.id, document=open(file_path, 'rb'))
                    os.remove(file_path)
                else:
                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
        else:
            await update.message.reply_text(response_text)
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")

# --- 8. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    application = Application.builder().token(os.environ["TELEGRAM_BOT_TOKEN"]).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    # –ú—ã —É–±—Ä–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ Telegram-–±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()