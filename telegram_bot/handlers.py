# telegram_bot/handlers.py
import os
import logging
import base64
from telegram import Update
from telegram.ext import ContextTypes
from langchain_core.messages import HumanMessage
from core.agent import agent_executor
from core.config import llm

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    agent_executor.memory.clear()
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.')

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_query = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: '{user_query}'")
    await update.message.reply_text('–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏...')
    
    try:
        # ReAct –∞–≥–µ–Ω—Ç —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç memory
        result = agent_executor.invoke({"input": user_query})
        
        # --- –§–û–†–ú–ò–†–£–ï–ú –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò ---
        final_answer = result.get("output", "–ê–≥–µ–Ω—Ç –Ω–µ –¥–∞–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
        intermediate_steps = result.get("intermediate_steps", [])
        
        debug_report = "üìù **–•–æ–¥ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –ê–≥–µ–Ω—Ç–∞** üìù\n\n"
        for action, observation in intermediate_steps:
            # action.log —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –±–ª–æ–∫ "Thought:"
            debug_report += f"ü§î **–ú—ã—Å–ª—å:** {action.log.strip().split('Action:')[0].strip()}\n"
            debug_report += f"üõ†Ô∏è **–î–µ–π—Å—Ç–≤–∏–µ:** `{action.tool}`\n"
            debug_report += f"üì• **–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:** `{action.tool_input}`\n"
            debug_report += f"üîé **–†–µ–∑—É–ª—å—Ç–∞—Ç:** `{observation}`\n\n"
        
        debug_report += f"‚úÖ **–§–∏–Ω–∞–ª—å–Ω—ã–π –û—Ç–≤–µ—Ç:**\n{final_answer}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        await update.message.reply_text(debug_report, parse_mode='Markdown')
        
        # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if final_answer.startswith("–î–æ–∫—É–º–µ–Ω—Ç") and ('.docx' in final_answer):
            try:
                file_path = final_answer.split(":")[-1].strip()
                if os.path.exists(file_path):
                    await context.bot.send_document(chat_id=update.effective_chat.id, document=open(file_path, 'rb'))
                    os.remove(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    await update.message.reply_text('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...')
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        user_caption = update.message.caption or "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
        
        base64_image = base64.b64encode(photo_bytes).decode("utf-8")
        
        message_payload = HumanMessage(content=[{"type": "text", "text": user_caption}, {"type": "image_url", "image_url": f"data:image/jpeg;base64,{base64_image}"},])
        response = llm.invoke([message_payload])
        await update.message.reply_text(response.content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")